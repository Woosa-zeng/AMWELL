<template lang="html">
  <div class="select-car">
    <div class="header" ref="header">
      <div class="select-header">
        <tab :line-width=3 active-color='#ea5441' v-model="index">
          <tab-item class="vux-center" :selected="itemTitle === index" v-for="(item, index) in list" @on-item-click="onItemClick(index)" :key="index">{{item}}</tab-item>
        </tab>
      </div>
      <search
        @result-click="resultClick"
        @on-change="getResult"
        :results="results"
        v-model="value"
        :autoFixed="false"
        @on-focus="onFocus"
        @on-cancel="onCancel"
        ref="search"></search>
      <section class="sel-condition">
        <div class="ct-item" @click="selCarBrand">品牌</div>
        <div class="ct-item" @click="selPrice">价格</div>
        <div class="ct-item" @click="linkFiltrate">筛选</div>
        <div class="ct-item" @click="selSort">排序</div>
      </section>
      <section class="condition" v-if="condition">
        <div class="condition-ct">
          <div class="con-cell-item" v-for="item in condition" @click="removeConditionTab(item)">
            <span class="con-name">{{item.text}}</span>
            <span class="con-icon"></span>
          </div>
        </div>
      </section>
    </div>
    <section class="content select-car-content" ref="listwrapper">
      <scroll class="wrapper"
              :data="carListData"
              :pullup="pullup"
              @scrollToEnd="searchCar">
         <ul>
           <li>
             <carlist :carType="carListData" v-if="dataFlag"></carlist>
             <div class="none" v-else>暂无数据……</div>
           </li>
         </ul>
      </scroll>
    </section>
    <section v-if="carBrandFlag">
      <carbrand v-on:close="closeBrand" v-on:brand="showCarBrand"></carbrand>
    </section>
    <section v-if="carSeriesFlag">
      <carseries v-on:close="closeSeries" v-on:series="showCarSeries"></carseries>
    </section>
    <section v-if="priceFlag">
      <price v-on:close="closePrice" v-on:price="getPrice"></price>
    </section>
    <section v-if="sortFlag">
      <sort v-on:close="closeSort" v-on:sort="getSort"></sort>
    </section>
  </div>
</template>
<script type="text/ecmascript-6">
  import { Tab, TabItem, Search } from 'vux'
  import axios from 'axios'
  import qs from 'qs'
  import carlist from '../CarList/CarList'
  import carbrand from '../CarBrand/CarBrand'
  import carseries from '../CarSeries/CarSeries'
  import price from '../Price/Price'
  import sort from '../Sort/Sort'
  const list = () => ['二手车', '新车', '平行进口车']
  export default{
    data() {
      return {
        dataFlag: true,
        list: list(),
        itemTitle: '',
        results: [],
        index: this.$store.state.carTypeTitle,
        value: '',
        carBrandFlag: false,
        carSeriesFlag: false,
        priceFlag: false,
        sortFlag: false,
        carBrand: '',
        carSeries: '',
        price: '',
        sort: this.$store.state.sort,
        pageNum: 1,
        carListData: [], // list数据
        pullup: true, // scroll
        pullUpFlag: true // scroll
      }
    },
    computed: {
      condition() {
        let list = this.$store.getters.getCondition
        this.pageNum = 1
        if (list.length) {
          return list
        } else {
          return false
        }
      },
      setBrand() {
        this.pageNum = 1
        let data = this.$store.getters.getBrand
        return data
      }
    },
    mounted() {
      this.$nextTick(() => {
        let height = this.$refs.header.offsetHeight
        let wrapper = this.$refs.listwrapper.offsetHeight
        console.log(`height == ${height}`)
        console.log(`wrapper == ${wrapper}`)
      })
    },
    created() {
      this.getCount()
      this.searchCar()
    },
    methods: {
      removeConditionTab(val) {
        this.pullUpFlag = true
        let list = this.$store.getters.getCondition
        let tabs = val.tabs
        for (let i = 0; i < list.length; i++) {
          if (val.text === list[i].text) {
            list.splice(i, 1)
          }
        }
        this.setStoreData(tabs)
        this.$store.commit('CONDITION', {condition: list})
        this.searchCar()
      },
      setStoreData(val) {
        switch (val) {
          case 'carBrand':
            this.$store.commit('CAR_BRAND_NAME', {carBrandName: '不限品牌'})
            this.$store.commit('CAR_BRAND', {carBrand: '-1'})
            break
          case 'carSeries':
            this.$store.commit('CAR_SERIES_ID', {carSeriesId: '-1'})
            this.$store.commit('CAR_SERIES_NAME', {carSeriesName: ''})
            break
          case 'price':
            this.$store.commit('PRICE_START', {priceStart: '-1'})
            this.$store.commit('PRICE_END', {priceEnd: '-1'})
            break
          case 'carType':
            this.$store.commit('CAR_TYPE', {carType: ''})
            break
        }
      },
      closeBrand(val) { // 关闭品牌选择层
        this.carBrandFlag = val
      },
      closeSeries(val) { // 关闭车系选择层
        this.carSeriesFlag = val
      },
      closePrice(val) { // 关闭价格选择层
        this.priceFlag = val
      },
      closeSort(val) { // 关闭排序选择层
        this.sortFlag = val
      },
      showCarBrand(val) { // 获取品牌
        this.pullUpFlag = true
        this.carBrand = val.id
        this.carSeriesFlag = true // 打开车系选择层
        this.searchCar()
        console.log(`brand==${val.id}`)
        console.log(`brand==${val.brandName}`)
      },
      showCarSeries(val) { // 获取车系
        this.pullUpFlag = true
        this.carSeries = val
        this.carSeriesFlag = false
        this.carBrandFlag = false
        this.searchCar()
        console.log(`series==${val.id}`)
        console.log(`series==${val.name}`)
      },
      getPrice(val) { // 获取价格
        this.pullUpFlag = true
        this.price = val
        this.priceFlag = false // 关闭价格选择层
        this.searchCar()
        console.log(this.price.start)
        console.log(this.price.end)
      },
      getSort(val) { // 获取排序
        this.pullUpFlag = true
        this.sort = val
        this.sortFlag = false // 关闭排序择层
        this.searchCar()
        console.log(val)
      },
      selSort() { // 打开排序选择层
        this.sortFlag = true
      },
      selPrice() { // 打开价格选择层
        this.priceFlag = true
      },
      selCarBrand() { // 打开品牌选择层
        this.carBrandFlag = true
      },
      onItemClick(index) { // 顶部菜单选择
        console.log('on item click:', index)
        this.pageNum = 1
        this.pullUpFlag = true
        this.searchCar()
        this.$store.commit('CAR_TYPE_TITLE', {carTypeTitle: index})
      },
      // 搜索功能
      setFocus() {
        this.$refs.search.setFocus()
      },
      resultClick(item) {
        window.alert('you click the result item: ' + JSON.stringify(item))
      },
      getResult(val) {
        this.pageNum = 1
        if (val.length) {
          console.log(`getResult === ${val}`)
        }
        this.pullUpFlag = true
        this.searchCar(val)
      },
      onFocus() {
        console.log('on focus')
      },
      onCancel() {
        console.log('on cancel')
        this.pageNum = 1
        this.pullUpFlag = true
        this.searchCar()
      },
      linkFiltrate() {
        this.$router.push({name: 'Filtrate'})
      },
      searchCar(text) {
        let that = this
        setTimeout(function() {
          console.log(`index===${this.index}`)
          console.log(that.setBrand)
          switch (that.index) {
            case 0:
              that.searchSecondHandCar(text)
              break
            case 1:
              that.searchNewCar(text)
              break
            case 2:
              that.searchImportCar(text)
              break
          }
        }, 0)
      },
      searchSecondHandCar(text) {
        if (this.pullUpFlag) {
          axios.post('/carSecondHandInfo/queryCarSecondHandInfoPageForWAP', qs.stringify({
            brandId: this.setBrand.carBrand,
            seriesId: this.setBrand.carSeriesId,
            carLevel: this.setBrand.carType,
            startPrice: this.setBrand.priceStart,
            endPrice: this.setBrand.priceEnd,
            orderBy: this.setBrand.sort,
            searchText: text || '',
            pageNum: this.pageNum,
            pageSize: 7
          })).then(res => {
            if (res.data.list.length > 0) {
              this.dataFlag = true
              console.log(`thispage==${this.pageNum}`)
              if (this.pageNum === 1) {
                this.carListData = res.data.list
              } else {
                this.carListData = this.carListData.concat(res.data.list)
              }
            } else {
              this.dataFlag = false
              this.carListData = []
            }
            // 设置pageNum,让其可以滚动
            if (this.pageNum < res.data.pages) {
              this.pageNum++
            } else {
              this.pullUpFlag = false
            }
          })
        }
      },
      searchNewCar(text) {
        if (this.pullUpFlag) {
          axios.post('/publicCar/carNewInfoqueryByPage', qs.stringify({
            brandId: this.setBrand.carBrand,
            seriesId: this.setBrand.carSeriesId,
            carLevel: this.setBrand.carType,
            guidePrice_s: this.setBrand.priceStart,
            guidePrice_e: this.setBrand.priceEnd,
            orderBy: this.setBrand.sort,
            carName: text || '',
            pageNum: this.pageNum,
            pageSize: 7
          })).then(res => {
            console.log(`page=== ${this.pageNum}`)
            if (res.data.list !== null) {
              this.dataFlag = true
              if (this.pageNum === 1) {
                this.carListData = res.data.list
              } else {
                this.carListData = this.carListData.concat(res.data.list)
              }
            } else {
              this.dataFlag = false
              this.carListData = []
            }
            console.log(this.carListData)
            // 设置pageNum,让其可以滚动
            if (this.pageNum < res.data.pages) {
              this.pageNum++
            } else {
              this.pullUpFlag = false
            }
            console.log(this.carListData)
          })
        }
      },
      searchImportCar(text) {
        if (this.pullUpFlag) {
          axios.post('/publicCar/importQueryByPage', qs.stringify({
            brandId: this.setBrand.carBrand,
            seriesId: this.setBrand.carSeriesId,
            carLevel: this.setBrand.carType,
            guidePrice_s: this.setBrand.priceStart,
            guidePrice_e: this.setBrand.priceEnd,
            orderBy: this.setBrand.sort,
            carName: text || '',
            pageNum: this.pageNum,
            pageSize: 7
          })).then(res => {
            console.log(`page=== ${this.pageNum}`)
            if (res.data.list !== null) {
              this.dataFlag = true
              if (this.pageNum === 1) {
                this.carListData = res.data.list
              } else {
                this.carListData = this.carListData.concat(res.data.list)
              }
            } else {
              this.dataFlag = false
              this.carListData = []
            }
            // 设置pageNum,让其可以滚动
            if (this.pageNum < res.data.pages) {
              this.pageNum++
            } else {
              this.pullUpFlag = false
            }
            console.log(this.carListData)
          })
        }
      }
    },
    components: {
      Tab,
      TabItem,
      Search,
      carlist,
      carbrand,
      carseries,
      price,
      sort
    }
  }
</script>
<style lang="less" rel="stylesheet/less" scoped>
  @import '~vux/src/styles/1px.less';
  @import '~vux/src/styles/center.less';
  @import url('../../common/less/index.less');
  .select-car{
    height: 100%;
  }
  .wrapper{
    height: 100%;
  }
  .content{
    background: #fff;
    overflow: hidden;
  }
  .active-6-1 {
    color: #ea5441 !important;
    border-color: #ea5441 !important;
  }
  .sel-condition{
    display: flex;
    padding: 10px 0;
    .border-1px();
    .ct-item{
      flex: 1;
      text-align: center;
      border-right: 1px solid #D9D9D9;
      font-size: 12px;
      &:last-child{
         border-right: 1px solid;
         border-right-color: transparent;
       }
     &:after{
        display: inline-block;
        content: "\25BC";
        color: #333333;
        font-size: 8px;
      }
    }
  }
  .condition{
    overflow: hidden;
    .border-1px();
  }
  .condition-ct{
    margin: 3px 10px 5px;
    .con-cell-item{
      display: inline-block;
      background: #f5f5f5;
      border-radius: 3px;
      padding: 2px 5px;
      margin: 2px;
      line-heigth: 16px;
      font-size: 11px;
      .con-name{
        display: inline-block;
        margin-right: 5px;
      }
      .con-icon{
        vertical-align: middle;
        display: inline-block;
        width: 12px;
        height: 12px;
        background-image: url("./close.png");
        background-size: contain;
      }
    }
  }
  .none{
    padding-top: 30px;
    text-align: center;
    background-color: #fff;
  }

</style>
